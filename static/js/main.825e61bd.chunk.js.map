{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","errors","cleanForm","resetForm","setState","handleChange","event","target","name","value","handleSubmit","preventDefault","Object","values","some","error","newMovie","props","onAdd","addError","prevState","validateInput","dataset","checkDoubles","type","match","this","action","onSubmit","htmlFor","id","undefined","autoComplete","placeholder","onChange","onBlur","hidden","data-type","classNames","disabled","Component","App","moviesFromServer","addMovie","isDuplicate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.825e61bd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    errors: {\n      title: false,\n      description: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    },\n  };\n\n  cleanForm = true;\n\n  static propTypes = {\n    onAdd: PropTypes.func.isRequired,\n    checkDoubles: PropTypes.func.isRequired,\n  }\n\n  resetForm = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      errors: {\n        title: false,\n        description: false,\n        imgUrl: false,\n        imdbUrl: false,\n        imdbId: false,\n      },\n    });\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.cleanForm = false;\n\n    this.setState(state => ({\n      [name]: value,\n      errors: {\n        ...state.errors,\n        [name]: false,\n      },\n    }));\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      errors,\n    } = this.state;\n\n    if (this.cleanForm) {\n      this.cleanForm = false;\n\n      this.setState(state => ({\n        errors: {\n          ...state.errors,\n          title: true,\n          imgUrl: true,\n          imdbUrl: true,\n          imdbId: true,\n        },\n      }));\n\n      return;\n    }\n\n    if (Object.values(errors).some(error => error)) {\n      return;\n    }\n\n    const newMovie = {\n      title, description, imgUrl, imdbUrl, imdbId,\n    };\n\n    this.resetForm();\n    this.props.onAdd(newMovie);\n  }\n\n  addError = (name) => {\n    this.setState(prevState => ({\n      errors: {\n        ...prevState.errors,\n        [name]: true,\n      },\n    }));\n  }\n\n  validateInput = (event) => {\n    const { name, dataset, value } = event.target;\n    const { checkDoubles } = this.props;\n\n    // eslint-disable-next-line\n    if (dataset.type === 'url' && !value.match(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/)) {\n      this.addError(name);\n\n      return;\n    }\n\n    if (dataset.type === 'id' && checkDoubles(value)) {\n      this.addError(name);\n\n      return;\n    }\n\n    if (!value) {\n      this.addError(name);\n    }\n  }\n\n  render() {\n    const {\n      title, description, imgUrl, imdbUrl, imdbId, errors,\n    } = this.state;\n\n    return (\n      <form\n        action=\"/\"\n        type=\"POST\"\n        onSubmit={this.handleSubmit}\n      >\n        <fieldset className=\"section\">\n          <legend>Add new Movie</legend>\n\n          <label htmlFor=\"title\">\n            Title:&nbsp;\n            <input\n              type=\"text\"\n              name=\"title\"\n              id=\"title\"\n              className={errors.title ? 'error' : undefined}\n              autoComplete=\"off\"\n              placeholder=\"Movie title\"\n              value={title}\n              onChange={this.handleChange}\n              onBlur={this.validateInput}\n            />\n          </label>\n          <p\n            className=\"error-message\"\n            hidden={!errors.title}\n          >\n            Please, provide movie name\n          </p>\n\n          <label htmlFor=\"description\">\n            Description:&nbsp;\n            <input\n              type=\"text\"\n              name=\"description\"\n              id=\"description\"\n              autoComplete=\"off\"\n              placeholder=\"Movie description\"\n              value={description}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label htmlFor=\"imgUrl\">\n            Movie poster:&nbsp;\n            <input\n              type=\"text\"\n              name=\"imgUrl\"\n              id=\"imgUrl\"\n              data-type=\"url\"\n              className={classNames({ error: errors.imgUrl })}\n              autoComplete=\"off\"\n              placeholder=\"Poster URL\"\n              value={imgUrl}\n              onChange={this.handleChange}\n              onBlur={this.validateInput}\n            />\n          </label>\n          <p\n            className=\"error-message\"\n            hidden={!errors.imgUrl}\n          >\n            Please, provide valid poster URL\n          </p>\n\n          <label htmlFor=\"imdbUrl\">\n            IMDB URL:&nbsp;\n            <input\n              type=\"text\"\n              name=\"imdbUrl\"\n              id=\"imdbUrl\"\n              data-type=\"url\"\n              className={errors.imdbUrl ? 'error' : undefined}\n              autoComplete=\"off\"\n              placeholder=\"IMDB URL\"\n              value={imdbUrl}\n              onChange={this.handleChange}\n              onBlur={this.validateInput}\n            />\n          </label>\n          <p\n            className=\"error-message\"\n            hidden={!errors.imdbUrl}\n          >\n            Please, provide valid IMDB URL\n          </p>\n\n          <label htmlFor=\"imdbId\">\n            IMDB ID:&nbsp;\n            <input\n              type=\"text\"\n              name=\"imdbId\"\n              id=\"imdbId\"\n              data-type=\"id\"\n              className={errors.imdbId ? 'error' : undefined}\n              autoComplete=\"off\"\n              placeholder=\"IMDB ID\"\n              value={imdbId}\n              onChange={this.handleChange}\n              onBlur={this.validateInput}\n            />\n          </label>\n          <p\n            className=\"error-message\"\n            hidden={!errors.imdbId}\n          >\n            IMDB ID is empty or matches already existing\n          </p>\n\n          <button\n            type=\"submit\"\n            disabled={Object.values(errors).some(error => error)}\n          >\n            Add Movie\n          </button>\n        </fieldset>\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  isDuplicate = (imdbId) => {\n    return this.state.movies.some(movie => movie.imdbId === imdbId);\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie\n            onAdd={this.addMovie}\n            checkDoubles={this.isDuplicate}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}